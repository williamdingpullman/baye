ybar = mean(y)
n = length(y)
## initialize
mu_out = numeric(n_iter)
sig2_out = numeric(n_iter)
mu_now = init$mu
## Gibbs sampler
for (i in 1:n_iter) {
sig2_now = update_sig2(n=n, y=y, mu=mu_now, nu_0=prior$nu_0, beta_0=prior$beta_0)
mu_now = update_mu(n=n, ybar=ybar, sig2=sig2_now, mu_0=prior$mu_0, sig2_0=prior$sig2_0)
sig2_out[i] = sig2_now
mu_out[i] = mu_now
}
cbind(mu=mu_out, sig2=sig2_out)
}
y = c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
ybar = mean(y)
n = length(y)
## prior
prior = list()
prior$mu_0 = 0
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=5000, init=init, prior=prior)
head(post)
summary(as.mcmc(post))
update_mu = function(n, ybar, sig2, mu_0, sig2_0) {
sig2_1 = 1.0 / (n / sig2 + 1.0 / sig2_0)
mu_1 = sig2_1 * (n * ybar / sig2 + mu_0 / sig2_0)
rnorm(n=1, mean=mu_1, sd=sqrt(sig2_1))
}
update_sig2 = function(n, y, mu, nu_0, beta_0) {
nu_1 = nu_0 + n / 2.0
sumsq = sum( (y - mu)^2 ) # vectorized
beta_1 = beta_0 + sumsq / 2.0
out_gamma = rgamma(n=1, shape=nu_1, rate=beta_1) # rate for gamma is shape for inv-gamma
1.0 / out_gamma # reciprocal of a gamma random variable is distributed inv-gamma
}
gibbs = function(y, n_iter, init, prior) {
ybar = mean(y)
n = length(y)
## initialize
mu_out = numeric(n_iter)
sig2_out = numeric(n_iter)
mu_now = init$mu
## Gibbs sampler
for (i in 1:n_iter) {
sig2_now = update_sig2(n=n, y=y, mu=mu_now, nu_0=prior$nu_0, beta_0=prior$beta_0)
mu_now = update_mu(n=n, ybar=ybar, sig2=sig2_now, mu_0=prior$mu_0, sig2_0=prior$sig2_0)
sig2_out[i] = sig2_now
mu_out[i] = mu_now
}
cbind(mu=mu_out, sig2=sig2_out)
}
y = c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
ybar = mean(y)
n = length(y)
## prior
prior = list()
prior$mu_0 = 1
prior$sig2_0 = 1.0
prior$n_0 = 2.0 # prior effective sample size for sig2
prior$s2_0 = 1.0 # prior point estimate for sig2
prior$nu_0 = prior$n_0 / 2.0 # prior parameter for inverse-gamma
prior$beta_0 = prior$n_0 * prior$s2_0 / 2.0 # prior parameter for inverse-gamma
hist(y, freq=FALSE, xlim=c(-1.0, 3.0)) # histogram of the data
curve(dnorm(x=x, mean=prior$mu_0, sd=sqrt(prior$sig2_0)), lty=2, add=TRUE) # prior for mu
points(y, rep(0,n), pch=1) # individual data points
points(ybar, 0, pch=19) # sample mean
set.seed(53)
init = list()
init$mu = 0.0
post = gibbs(y=y, n_iter=5000, init=init, prior=prior)
head(post)
summary(as.mcmc(post))
lg=function(mu, n, ybar)
{ mu2=mu^2
n*(ybar*mu-mu2/2)-log(1+mu2)}
mu_now=10
cand_sd=5
y=c(1.2,1.4,-0.5,0.3,0.9,2.3,1.0,0.1,1.3,1.9)
ybar=mean(y)
m=1000
n=length(y)
mu_storage<-c()
mu_storage<-c(mu_storage,mu_now)
acceptance_count=0
mh<-function(mu_now,type_MH,cand_sd)
{
for (i in 1:m)
{
if (type_MH=="randomwalk")  # random walk, as mean is updated with mu_now
{
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd)
}
else
{
if(type_MH=="independent")  # independent, as mean is fixed
{mu_cand = rnorm(n=1, mean=3, sd=cand_sd)}
else
{print("woring type of MH")
break
}
}
lg_alpha=lg(mu_cand,n=n,ybar = ybar)-lg(mu_now,n=n,ybar=ybar)
alpha=exp(lg_alpha)
if(alpha>1)
{mu_now=mu_cand
mu_storage<-c(mu_storage,mu_cand)
acceptance_count=acceptance_count+1}
else
{random_p=runif(1)
if(alpha>random_p)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{mu_now=mu_now}
}
}
#return the following
list(mu=mu_storage,accpt=acceptance_count/m)
}
tt_0<-mh(mu_now=5,type_MH="randomwalk",cand_sd=10)
plot.ts(tt_0$mu)
library(coda)
set.seed(61)
post0 = mh(mu_now=0.0, type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:500)]))
mu
post0$mu
coda::traceplot(as.mcmc(post0$mu[-c(1:50)]))
post0 = mh(mu_now=0.0, type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post0$mu[-c(1:50)]))
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$mu
m=10000
mh<-function(mu_now,type_MH,cand_sd)
{
for (i in 1:m)
{
if (type_MH=="randomwalk")  # random walk, as mean is updated with mu_now
{
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd)
}
else
{
if(type_MH=="independent")  # independent, as mean is fixed
{mu_cand = rnorm(n=1, mean=3, sd=cand_sd)}
else
{print("woring type of MH")
break
}
}
lg_alpha=lg(mu_cand,n=n,ybar = ybar)-lg(mu_now,n=n,ybar=ybar)
alpha=exp(lg_alpha)
if(alpha>1)
{mu_now=mu_cand
mu_storage<-c(mu_storage,mu_cand)
acceptance_count=acceptance_count+1}
else
{random_p=runif(1)
if(alpha>random_p)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{mu_now=mu_now}
}
}
#return the following
list(mu=mu_storage,accpt=acceptance_count/m)
}
set.seed(61)
post0 = mh(mu_now=0.0, type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
post0$mu
mean(post0$mu)
mean(y)
coda::autocorr.plot(as.mcmc(post0$mu))
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
lg=function(mu, n, ybar)
{ mu2=mu^2
n*(ybar*mu-mu2/2)-log(1+mu2)}
mu_now=10
cand_sd=5
y=c(1.2,1.4,-0.5,0.3,0.9,2.3,1.0,0.1,1.3,1.9)
ybar=mean(y)
n=length(y)
mu_storage<-c()
mu_storage<-c(mu_storage,mu_now)
acceptance_count=0
mh<-function(mu_now,m,type_MH,cand_sd)
{
for (i in 1:m)
{
if (type_MH=="randomwalk")  # random walk, as mean is updated with mu_now
{
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd)
}
else
{
if(type_MH=="independent")  # independent, as mean is fixed
{mu_cand = rnorm(n=1, mean=3, sd=cand_sd)}
else
{print("woring type of MH")
break
}
}
lg_alpha=lg(mu_cand,n=n,ybar = ybar)-lg(mu_now,n=n,ybar=ybar)
alpha=exp(lg_alpha)
if(alpha>1)
{mu_now=mu_cand
mu_storage<-c(mu_storage,mu_cand)
acceptance_count=acceptance_count+1}
else
{random_p=runif(1)
if(alpha>random_p)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{mu_now=mu_now}
}
}
#return the following
list(mu=mu_storage,accpt=acceptance_count/m)
}
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
coda::autocorr.plot(as.mcmc(post0$mu))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
coda::autocorr.plot(as.mcmc(post0$mu))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
coda::autocorr.plot(as.mcmc(post0$mu))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
coda::autocorr.plot(as.mcmc(post0$mu))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
set.seed(61)
post2 = mh(mu_now=0.0, m=100e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
set.seed(61)
post2 = mh(mu_now=0.0, m=10e4,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
coda::autocorr.diag(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post1$mu))
coda::autocorr.plot(as.mcmc(post1$mu))
coda::autocorr.diag(as.mcmc(post1$mu))
coda::autocorr.plot(as.mcmc(post2$mu))
coda::autocorr.diag(as.mcmc(post2$mu))
str(post2) # contains 100,000 iterations
lg=function(mu, n, ybar)
{ mu2=mu^2
n*(ybar*mu-mu2/2)-log(1+mu2)}
mu_now=10
cand_sd=5
y=c(1.2,1.4,-0.5,0.3,0.9,2.3,1.0,0.1,1.3,1.9)
ybar=mean(y)
n=length(y)
mu_storage<-c()
mu_storage<-c(mu_storage,mu_now)
acceptance_count=0
mh<-function(mu_now,m,type_MH,cand_sd)
{
for (i in 1:m)
{
if (type_MH=="randomwalk")  # random walk, as mean is updated with mu_now
{
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd)
}
else
{
if(type_MH=="independent")  # independent, as mean is fixed
{mu_cand = rnorm(n=1, mean=3, sd=cand_sd)}
else
{print("woring type of MH")
break
}
}
lg_alpha=lg(mu_cand,n=n,ybar = ybar)-lg(mu_now,n=n,ybar=ybar)
alpha=exp(lg_alpha)
if(alpha>1)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{random_p=runif(1)
if(alpha>random_p)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{mu_now=mu_now}
}
mu_storage<-c(mu_storage,mu_now)
}
#return the following
list(mu=mu_storage,accpt=acceptance_count/m)
}
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
set.seed(61)
post2 = mh(mu_now=0.0, m=10e4,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
str(post2) # contains 100,000 iterations
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
coda::autocorr.plot(as.mcmc(post0$mu))
coda::autocorr.diag(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post0$mu))
coda::autocorr.diag(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post1$mu))
coda::autocorr.diag(as.mcmc(post1$mu))
coda::autocorr.plot(as.mcmc(post2$mu))
coda::autocorr.diag(as.mcmc(post2$mu))
str(post2) # contains 100,000 iterations
coda::autocorr.plot(as.mcmc(post0$mu))
set.seed(61)
post2 = mh(mu_now=0.0, m=100e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
coda::effectiveSize(as.mcmc(post2$mu)) # effective sample size of ~350
coda::autocorr.plot(as.mcmc(post2$mu), lag.max=500)
thin_interval = 400 # how far apart the iterations are for autocorrelation to be essentially 0.
thin_indx = seq(from=thin_interval, to=length(post2$mu), by=thin_interval)
head(thin_indx)
post2mu_thin = post2$mu[thin_indx]
traceplot(as.mcmc(post2$mu))
traceplot(as.mcmc(post2mu_thin))
coda::autocorr.plot(as.mcmc(post2mu_thin), lag.max=10)
effectiveSize(as.mcmc(post2mu_thin))
length(post2mu_thin)
str(post0) # contains 10,000 iterations
coda::effectiveSize(as.mcmc(post0$mu)) # effective sample size of ~2,500
raftery.diag(as.mcmc(post0$mu))
nburn = 1000 # remember to discard early iterations
post0$mu_keep = post0$mu[-c(1:1000)]
summary(as.mcmc(post0$mu_keep))
coda::autocorr.plot(as.mcmc(post0$mu))
coda::autocorr.diag(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post0$mu))
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.9)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.04)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
y=c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.5)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
set.seed(61)
post2 = mh(mu_now=0.0, m=100e3,type_MH="randomwalk",cand_sd=3)
set.seed(61)
post2 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=3)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
post2$accpt
set.seed(61)
post3 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=4)
coda::traceplot(as.mcmc(post3$mu[-c(1:10)]))
post3$accpt
set.seed(61)
post2 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=3)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
post2$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.5)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
coda::autocorr.plot(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post1$mu))
coda::autocorr.plot(as.mcmc(post2$mu))
coda::autocorr.plot(as.mcmc(post3$mu))
coda::autocorr.diag(as.mcmc(post3$mu))
mean(post1)
mean(post1$mu)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
mean(post1$mu)
y=c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
lg=function(mu, n, ybar)
{ mu2=mu^2
n*(ybar*mu-mu2/2)-log(1+mu2)}
mu_now=10
cand_sd=5
y=c(-0.2, -1.5, -5.3, 0.3, -0.8, -2.2)
ybar=mean(y)
n=length(y)
mu_storage<-c()
mu_storage<-c(mu_storage,mu_now)
acceptance_count=0
mh<-function(mu_now,m,type_MH,cand_sd)
{
for (i in 1:m)
{
if (type_MH=="randomwalk")  # random walk, as mean is updated with mu_now
{
mu_cand = rnorm(n=1, mean=mu_now, sd=cand_sd)
}
else
{
if(type_MH=="independent")  # independent, as mean is fixed
{mu_cand = rnorm(n=1, mean=3, sd=cand_sd)}
else
{print("woring type of MH")
break
}
}
lg_alpha=lg(mu_cand,n=n,ybar = ybar)-lg(mu_now,n=n,ybar=ybar)
alpha=exp(lg_alpha)
if(alpha>1)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{random_p=runif(1)
if(alpha>random_p)
{mu_now=mu_cand
acceptance_count=acceptance_count+1}
else
{mu_now=mu_now}
}
mu_storage<-c(mu_storage,mu_now)
}
#return the following
list(mu=mu_storage,accpt=acceptance_count/m)
}
set.seed(61)
post0 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=0.5)
coda::traceplot(as.mcmc(post0$mu[-c(1:10)]))
post0$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
mean(post1$mu)
set.seed(61)
post2 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=3)
coda::traceplot(as.mcmc(post2$mu[-c(1:10)]))
post2$accpt
set.seed(61)
post3 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=4)
coda::traceplot(as.mcmc(post3$mu[-c(1:10)]))
post3$accpt
set.seed(61)
post1 = mh(mu_now=0.0, m=10e3,type_MH="randomwalk",cand_sd=1.5)
coda::traceplot(as.mcmc(post1$mu[-c(1:10)]))
post1$accpt
coda::autocorr.plot(as.mcmc(post0$mu))
coda::autocorr.diag(as.mcmc(post0$mu))
coda::autocorr.plot(as.mcmc(post1$mu))
coda::autocorr.plot(as.mcmc(post2$mu))
coda::autocorr.plot(as.mcmc(post3$mu))
mean(post1$mu)
